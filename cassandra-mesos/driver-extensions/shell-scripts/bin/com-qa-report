#!/bin/sh
#
#    Copyright (C) 2015 Mesosphere, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# com-qa-report captures log files and various information from nodetool from all available nodes.
# Information from scheduler is currently not included.
# Archived Cassandra log files are also not included.
#

_BINARY=bin/nodetool
_LIVE_NODES_TYPE=nodetool
. `dirname $0`/com.in.sh

targetDir="qa-report-`date '+%Y-%m-%d-%H-%M-%S'`"
if [ ! -z $1 ] ; then
    targetDir="$1"
fi

echo "Downloading QA report files to ${targetDir}"

function nodetoolInvoke() {
    ${EXEC} -h $1 -p $2 $3 > $4/nodetool-$3.txt 2>&1
    ec=$?
    if [ "0" != "${ec}" ] ; then
        echo "** nodetool $3 against ${currentIp} failed with exit code ${ec}"
    fi
}

curl -s "${API_BASE_URI}qaReportResources/text" | while read ln ; do
    case $ln in
        JMX_PORT:*)
            jmxPort="`echo $ln | cut -d\  -f 2`"
            ;;
        NODE_IP:*)
            currentIp="`echo $ln | cut -d\  -f 2`"
            mkdir -p ${targetDir}/${currentIp}

            echo "Retrieving nodetool information from ${currentIp}"
            nodetoolInvoke ${currentIp} ${jmxPort} version "${targetDir}/${currentIp}"
            nodetoolInvoke ${currentIp} ${jmxPort} info "${targetDir}/${currentIp}"
            nodetoolInvoke ${currentIp} ${jmxPort} status "${targetDir}/${currentIp}"
            nodetoolInvoke ${currentIp} ${jmxPort} tpstats "${targetDir}/${currentIp}"

            echo "Retrieving log files from ${currentIp}"
            ;;
        BASE:*)
            currentBaseUri="`echo $ln | cut -d\  -f 2`"
            ;;
        LOG:*)
            log="`echo $ln | cut -d\  -f 2`"
            file="`basename ${log}`"
            echo "   retrieving file ${file} ..."
            curl -s "${currentBaseUri}files/download.json?path=${log}" > ${targetDir}/${currentIp}/${file}
            curlExitCode=${PIPESTATUS[0]}
            if [ "0" != "${curlExitCode}" ] ; then
                echo "Failed to download ${file} from ${currentIp}. Curl exited with code ${curlExitCode}" > /dev/stderr
            fi
            ;;
    esac
done

curlExitCode=${PIPESTATUS[0]}
if [ "0" != "${curlExitCode}" ] ; then
    echo "Could not retrieve list of executors and log files. Curl exited with code ${curlExitCode}" > /dev/stderr
    exit ${curlExitCode}
fi
